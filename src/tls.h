#pragma once
#include "stdint.h"

#pragma pack(push, 1)
struct Random {
    /* The current time and date in standard UNIX 32-bit format. */
    uint32_t gmt_unix_time;
    /* 28 bytes generated by a secure random number generator. */
    char random_bytes[28] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ,0,0,0};
};

struct ClientHello {
    /* The version of the TLS protocol by which the client wishes to
     * communicate during this session.  This SHOULD be the latest
     * (highest valued) version supported by the client.  For this
     * version of the specification, the version will be 3.3  */
    uint8_t client_version[2] {3, 3};

    Random random;
    /* The ID of a session the client wishes to use for this connection.
     * This field is empty if no session_id is available, or if the
     * client wishes to generate new security parameters. */
    uint16_t session_id_length = 0;
    uint8_t session_id[0]; // <0..32> meaning 0 to 32 bytes.
    uint8_t cipher_suites_length = 2;
    uint8_t cipher_suites1 = 0x13;
    uint8_t cipher_suites2 = 0x02; // todo https://www.rfc-editor.org/rfc/rfc5246#appendix-A.5
    uint8_t compression_methods_length = 1;
    uint8_t compression_methods = 0; // no compression
    uint16_t extensions_length = 0;
    // uint16_t extension_type = 65535; // = default of ExtensionType: struct {};   
};

struct Handshake {
    uint8_t msg_type = 1; // handshake type (client_hello) 
    uint8_t length1 = 0;             /* bytes in message */
    uint8_t length2 = 0;
    uint8_t length3 = 0; // <-- lsb
    ClientHello body;
};

struct TLSPlaintext {
    uint8_t type = 22; // handshake
    uint8_t protocol_version[2] = {3,3}; // tls1.2 record
    uint8_t length1 = 0;
    uint8_t length2 = sizeof(Handshake);
    uint8_t fragment[sizeof(Handshake)]; 
};

#pragma pack(pop)

TLSPlaintext client_hello();
